// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Frame.proto

#ifndef PROTOBUF_Frame_2eproto__INCLUDED
#define PROTOBUF_Frame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace astra {
namespace serialization {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Frame_2eproto();
void protobuf_AssignDesc_Frame_2eproto();
void protobuf_ShutdownFile_Frame_2eproto();

class Frame;

// ===================================================================

class Frame : public ::google::protobuf::Message {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  Frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 byteLength = 1;
  inline bool has_bytelength() const;
  inline void clear_bytelength();
  static const int kByteLengthFieldNumber = 1;
  inline ::google::protobuf::uint32 bytelength() const;
  inline void set_bytelength(::google::protobuf::uint32 value);

  // optional uint32 frameIndex = 2;
  inline bool has_frameindex() const;
  inline void clear_frameindex();
  static const int kFrameIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 frameindex() const;
  inline void set_frameindex(::google::protobuf::uint32 value);

  // optional bytes rawFrameWrapper = 3;
  inline bool has_rawframewrapper() const;
  inline void clear_rawframewrapper();
  static const int kRawFrameWrapperFieldNumber = 3;
  inline const ::std::string& rawframewrapper() const;
  inline void set_rawframewrapper(const ::std::string& value);
  inline void set_rawframewrapper(const char* value);
  inline void set_rawframewrapper(const void* value, size_t size);
  inline ::std::string* mutable_rawframewrapper();
  inline ::std::string* release_rawframewrapper();
  inline void set_allocated_rawframewrapper(::std::string* rawframewrapper);

  // @@protoc_insertion_point(class_scope:astra.serialization.proto.Frame)
 private:
  inline void set_has_bytelength();
  inline void clear_has_bytelength();
  inline void set_has_frameindex();
  inline void clear_has_frameindex();
  inline void set_has_rawframewrapper();
  inline void clear_has_rawframewrapper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bytelength_;
  ::google::protobuf::uint32 frameindex_;
  ::std::string* rawframewrapper_;
  friend void  protobuf_AddDesc_Frame_2eproto();
  friend void protobuf_AssignDesc_Frame_2eproto();
  friend void protobuf_ShutdownFile_Frame_2eproto();

  void InitAsDefaultInstance();
  static Frame* default_instance_;
};
// ===================================================================


// ===================================================================

// Frame

// optional uint32 byteLength = 1;
inline bool Frame::has_bytelength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::set_has_bytelength() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Frame::clear_has_bytelength() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Frame::clear_bytelength() {
  bytelength_ = 0u;
  clear_has_bytelength();
}
inline ::google::protobuf::uint32 Frame::bytelength() const {
  // @@protoc_insertion_point(field_get:astra.serialization.proto.Frame.byteLength)
  return bytelength_;
}
inline void Frame::set_bytelength(::google::protobuf::uint32 value) {
  set_has_bytelength();
  bytelength_ = value;
  // @@protoc_insertion_point(field_set:astra.serialization.proto.Frame.byteLength)
}

// optional uint32 frameIndex = 2;
inline bool Frame::has_frameindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Frame::set_has_frameindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Frame::clear_has_frameindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Frame::clear_frameindex() {
  frameindex_ = 0u;
  clear_has_frameindex();
}
inline ::google::protobuf::uint32 Frame::frameindex() const {
  // @@protoc_insertion_point(field_get:astra.serialization.proto.Frame.frameIndex)
  return frameindex_;
}
inline void Frame::set_frameindex(::google::protobuf::uint32 value) {
  set_has_frameindex();
  frameindex_ = value;
  // @@protoc_insertion_point(field_set:astra.serialization.proto.Frame.frameIndex)
}

// optional bytes rawFrameWrapper = 3;
inline bool Frame::has_rawframewrapper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Frame::set_has_rawframewrapper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Frame::clear_has_rawframewrapper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Frame::clear_rawframewrapper() {
  if (rawframewrapper_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawframewrapper_->clear();
  }
  clear_has_rawframewrapper();
}
inline const ::std::string& Frame::rawframewrapper() const {
  // @@protoc_insertion_point(field_get:astra.serialization.proto.Frame.rawFrameWrapper)
  return *rawframewrapper_;
}
inline void Frame::set_rawframewrapper(const ::std::string& value) {
  set_has_rawframewrapper();
  if (rawframewrapper_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawframewrapper_ = new ::std::string;
  }
  rawframewrapper_->assign(value);
  // @@protoc_insertion_point(field_set:astra.serialization.proto.Frame.rawFrameWrapper)
}
inline void Frame::set_rawframewrapper(const char* value) {
  set_has_rawframewrapper();
  if (rawframewrapper_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawframewrapper_ = new ::std::string;
  }
  rawframewrapper_->assign(value);
  // @@protoc_insertion_point(field_set_char:astra.serialization.proto.Frame.rawFrameWrapper)
}
inline void Frame::set_rawframewrapper(const void* value, size_t size) {
  set_has_rawframewrapper();
  if (rawframewrapper_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawframewrapper_ = new ::std::string;
  }
  rawframewrapper_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:astra.serialization.proto.Frame.rawFrameWrapper)
}
inline ::std::string* Frame::mutable_rawframewrapper() {
  set_has_rawframewrapper();
  if (rawframewrapper_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rawframewrapper_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:astra.serialization.proto.Frame.rawFrameWrapper)
  return rawframewrapper_;
}
inline ::std::string* Frame::release_rawframewrapper() {
  clear_has_rawframewrapper();
  if (rawframewrapper_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rawframewrapper_;
    rawframewrapper_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Frame::set_allocated_rawframewrapper(::std::string* rawframewrapper) {
  if (rawframewrapper_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rawframewrapper_;
  }
  if (rawframewrapper) {
    set_has_rawframewrapper();
    rawframewrapper_ = rawframewrapper;
  } else {
    clear_has_rawframewrapper();
    rawframewrapper_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:astra.serialization.proto.Frame.rawFrameWrapper)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace serialization
}  // namespace astra

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Frame_2eproto__INCLUDED
