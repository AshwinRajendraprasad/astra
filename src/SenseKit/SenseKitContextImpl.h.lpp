/* ^^^AUTOGENHEADER^^^ */
#ifndef SENSEKITCONTEXTIMPL_H
#define SENSEKITCONTEXTIMPL_H

#include <SenseKit/sensekit_types.h>
#include <atomic>
#include <memory>
#include <unordered_map>
#include <string>

#include "PluginManager.h"
#include "StreamSet.h"
#include "StreamReader.h"
#include "Core/shared_library.h"
#include "Logger.h"
#include "StreamSetCatalog.h"

struct StreamServiceProxyBase;

namespace sensekit {

    class SenseKitContextImpl
    {
    public:
        SenseKitContextImpl() = default;
        SenseKitContextImpl& operator=(const SenseKitContextImpl& rhs) = delete;
        SenseKitContextImpl(const SenseKitContextImpl& context) = delete;

        sensekit_status_t initialize();
        sensekit_status_t terminate();

^^^BEGINREPLACE:stream^^^
        ^RETURN^ ^FUNC^(^PARAMS:ref^);

^^^ENDREPLACE^^^
        sensekit_status_t notify_host_event(sensekit_event_id id, const void* data, size_t dataSize);

    private:
        bool m_initialized{false};

        using PluginManagerPtr = std::unique_ptr<PluginManager>;
        PluginManagerPtr m_pluginManager;

        using ReaderList = std::vector<StreamReader*>;

        ReaderList m_activeReaders;
        StreamSetCatalog m_setCatalog;
    };
}

#endif /* SENSEKITCONTEXTIMPL_H */
