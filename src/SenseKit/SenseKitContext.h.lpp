/* ^^^AUTOGENHEADER^^^ */
#ifndef SENSEKITCONTEXT_H
#define SENSEKITCONTEXT_H

#include <SenseKit/sensekit_types.h>
#include <memory>

struct StreamServiceProxyBase;

namespace sensekit {

    class StreamSet;
    class StreamSetCatalog;
    class SenseKitContextImpl;

    class SenseKitContext
    {
    public:
        SenseKitContext();
        ~SenseKitContext();

        SenseKitContext& operator=(const SenseKitContext& rhs) = delete;
        SenseKitContext(const SenseKitContext& context) = delete;

        sensekit_status_t initialize();
        sensekit_status_t terminate();

^^^BEGINREPLACE:stream^^^
        ^RETURN^ ^FUNC^(^PARAMS:ref^);

^^^ENDREPLACE^^^
        StreamServiceProxyBase* proxy();

        sensekit_status_t notify_host_event(sensekit_event_id id, const void* data, size_t dataSize);

    private:
        std::unique_ptr<SenseKitContextImpl> m_impl;
        std::unique_ptr<StreamServiceProxyBase> m_proxy;
    };
}

#endif /* SENSEKITCONTEXT_H */
