/* ^^^AUTOGENHEADER^^^ */
#ifndef SENSEKITCONTEXT_H
#define SENSEKITCONTEXT_H

#include <SenseKit/sensekit_types.h>
#include <atomic>
#include <memory>
#include "PluginManager.h"
#include "StreamSet.h"
#include "StreamReader.h"
#include "Core/shared_library.h"
#include "Logger.h"

struct StreamServiceProxyBase;

namespace sensekit {

    class SenseKitContext
    {
    public:
        SenseKitContext() = default;
        SenseKitContext& operator=(const SenseKitContext& rhs) = delete;
        SenseKitContext(const SenseKitContext& context) = delete;

^^^BEGINREPLACE:stream^^^
        ^RETURN^ ^FUNC^(^PARAMS:ref^);

^^^ENDREPLACE^^^

        void raise_existing_streams_added(stream_added_callback_t callback, void* clientTag);

        StreamSet& get_rootSet() { return m_rootSet; }

        StreamServiceProxyBase* get_streamServiceProxy() { return m_streamServiceProxy; }

        sensekit_status_t notify_host_event(sensekit_event_id id, const void* data, size_t dataSize);

    private:
        bool m_initialized{false};

        using LoggerPtr = std::unique_ptr<Logger>;
        LoggerPtr m_logger;

        StreamSet m_rootSet;

        StreamServiceProxyBase* m_streamServiceProxy;

        using PluginManagerPtr = std::unique_ptr<PluginManager>;
        PluginManagerPtr m_pluginManager;

        using ReaderPtr = std::unique_ptr<StreamReader>;
        using ReaderList = std::vector<ReaderPtr>;

        ReaderList m_readers;
    };
}

#endif /* SENSEKITCONTEXT_H */
