/* ^^^AUTOGENHEADER^^^ */
#include "SenseKitContext.h"
#include <SenseKit/Plugins/StreamServiceProxyBase.h>
#include <SenseKitAPI.h>
#include <SenseKit/host_events.h>
#include <memory>

static std::unique_ptr<sensekit::SenseKitContext> g_ContextPtr(nullptr);
static bool g_Initialized = false;

SENSEKIT_BEGIN_DECLS

SENSEKIT_API sensekit_status_t sensekit_initialize()
{
    if (g_Initialized)
        return SENSEKIT_STATUS_SUCCESS;

    g_Initialized = true;
    g_ContextPtr = std::make_unique<sensekit::SenseKitContext>();

    return g_ContextPtr->initialize();
}

SENSEKIT_API sensekit_status_t sensekit_terminate()
{
    if (!g_Initialized)
        return SENSEKIT_STATUS_SUCCESS;

    sensekit_status_t rc =  g_ContextPtr->terminate();
    g_ContextPtr = nullptr;
    g_Initialized = false;

    return rc;
}

^^^BEGINREPLACE:stream^^^
SENSEKIT_API ^RETURN^ sensekit_^FUNC^(^PARAMS^)
{
    if (g_ContextPtr)
    {
        return g_ContextPtr->^FUNC^(^PARAMS:names,deref^);
    }
    else
    {
        return SENSEKIT_STATUS_UNINITIALIZED;
    }
}

^^^ENDREPLACE^^^
SENSEKIT_API sensekit_status_t sensekit_notify_host_event(sensekit_event_id id, const void* data, size_t dataSize)
{
    if (g_ContextPtr)
    {
        return g_ContextPtr->notify_host_event(id, data, dataSize);
    }
    else
    {
        return SENSEKIT_STATUS_UNINITIALIZED;
    }
}

SENSEKIT_API sensekit_status_t sensekit_notify_resource_available(const char* resourceURI)
{
    return sensekit_notify_host_event(SENSEKIT_EVENT_RESOURCE_AVAILABLE, resourceURI, strlen(resourceURI));
}

SENSEKIT_API sensekit_status_t sensekit_notify_resource_unavailable(const char* resourceURI)
{
    return sensekit_notify_host_event(SENSEKIT_EVENT_RESOURCE_UNAVAILABLE, resourceURI, strlen(resourceURI));
}

SENSEKIT_END_DECLS