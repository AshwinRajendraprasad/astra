/* ^^^AUTOGENHEADER^^^ */
#include "SenseKitContext.h"
#include <SenseKit/Plugins/StreamServiceProxyBase.h>
#include <SenseKitAPI.h>
#include <SenseKit/host_events.h>

static sensekit::SenseKitContext g_Context;

SENSEKIT_BEGIN_DECLS

^^^BEGINREPLACE:stream^^^
SENSEKIT_API ^RETURN^ sensekit_^FUNC^(^PARAMS^)
{
    return g_Context.^FUNC^(^PARAMS:names,deref^);
}

^^^ENDREPLACE^^^
SENSEKIT_API sensekit_status_t sensekit_notify_host_event(sensekit_event_id id, const void* data, size_t dataSize)
{
    return g_Context.notify_host_event(id, data, dataSize);
}

SENSEKIT_API sensekit_status_t sensekit_notify_resource_available(const char* resourceURI)
{
    return sensekit_notify_host_event(SENSEKIT_EVENT_RESOURCE_AVAILABLE, resourceURI, strlen(resourceURI));
}

SENSEKIT_API sensekit_status_t sensekit_notify_resource_unavailable(const char* resourceURI)
{
    return sensekit_notify_host_event(SENSEKIT_EVENT_RESOURCE_UNAVAILABLE, resourceURI, strlen(resourceURI));
}

SENSEKIT_END_DECLS