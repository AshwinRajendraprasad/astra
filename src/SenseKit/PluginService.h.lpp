/* ^^^AUTOGENHEADER^^^ */
#ifndef PLUGINSERVICE_H
#define PLUGINSERVICE_H

#include <SenseKit/sensekit_types.h>
#include "Stream.h"
#include "StreamBin.h"
#include "Core/Signal.h"
#include "Logger.h"

using CallbackId = size_t;

struct PluginServiceProxyBase;

namespace sensekit
{
    class StreamSet;
    class StreamSetCatalog;

    class PluginService
    {
    public:
        PluginService(StreamSetCatalog& catalog)
            : m_setCatalog(catalog)
            {}

        PluginService(const PluginService& service) = delete;
        PluginService& operator=(const PluginService& rhs) = delete;

        PluginServiceProxyBase* create_proxy();
        void notify_host_event(sensekit_event_id id, const void* data, size_t dataSize);

^^^BEGINREPLACE:plugin^^^
        ^RETURN^ ^FUNC^(^PARAMS:ref^);
^^^ENDREPLACE^^^

    private:
        StreamSetCatalog& m_setCatalog;
        Signal<sensekit_event_id, const void*, size_t> m_hostEventSignal;
    };
}

#endif /* PLUGINSERVICE_H */