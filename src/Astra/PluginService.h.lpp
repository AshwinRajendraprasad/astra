/* ^^^AUTOGENHEADER^^^ */
#ifndef PLUGINSERVICE_H
#define PLUGINSERVICE_H

#include <Astra/astra_types.h>
#include <Astra/Plugins/plugin_callbacks.h>
#include <memory>

using CallbackId = size_t;

struct PluginServiceProxyBase;

namespace astra
{
    class StreamSet;
    class StreamSetCatalog;
    class PluginServiceImpl;

    class PluginService
    {
    public:
        PluginService(StreamSetCatalog& catalog);
        ~PluginService();

        PluginService(const PluginService& service) = delete;
        PluginService& operator=(const PluginService& rhs) = delete;

        PluginServiceProxyBase* proxy();
        void notify_host_event(astra_event_id id, const void* data, size_t dataSize);

^^^BEGINREPLACE:plugin^^^
        ^RETURN^ ^FUNC^(^PARAMS:ref^);
^^^ENDREPLACE^^^

    private:
        std::unique_ptr<PluginServiceImpl> m_impl;
        std::unique_ptr<PluginServiceProxyBase> m_proxy;
    };
}

#endif /* PLUGINSERVICE_H */