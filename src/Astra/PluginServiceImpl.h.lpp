/* ^^^AUTOGENHEADER^^^ */
#ifndef PLUGINSERVICEIMPL_H
#define PLUGINSERVICEIMPL_H

#include <Astra/astra_types.h>
#include "Stream.h"
#include "StreamBin.h"
#include "Signal.h"
#include "Logger.h"

using CallbackId = size_t;

struct PluginServiceImplProxyBase;

namespace astra
{
    class StreamSet;
    class StreamSetCatalog;

    class PluginServiceImpl
    {
    public:
        PluginServiceImpl(StreamSetCatalog& catalog)
            : m_setCatalog(catalog)
            {}

        PluginServiceImpl(const PluginServiceImpl& service) = delete;
        PluginServiceImpl& operator=(const PluginServiceImpl& rhs) = delete;

        void notify_host_event(astra_event_id id, const void* data, size_t dataSize);

^^^BEGINREPLACE:plugin^^^
        ^RETURN^ ^FUNC^(^PARAMS:ref^);
^^^ENDREPLACE^^^

    private:
        StreamSetCatalog& m_setCatalog;
        Signal<astra_event_id, const void*, size_t> m_hostEventSignal;
    };
}

#endif /* PLUGINSERVICEIMPL_H */