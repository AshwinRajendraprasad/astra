/* ^^^AUTOGENHEADER^^^ */
#ifndef ASTRA_PLUGIN_SERVICE_H
#define ASTRA_PLUGIN_SERVICE_H

#include <astra_core/capi/astra_types.h>
#include <astra_core/capi/plugins/astra_plugin_callbacks.h>
#include <memory>

using CallbackId = size_t;

struct astra_pluginservice_proxy_t;

namespace astra
{
    class streamset;
    class streamset_catalog;
    class plugin_service_impl;

    class plugin_service
    {
    public:
        plugin_service(streamset_catalog& catalog);
        ~plugin_service();

        plugin_service(const plugin_service& service) = delete;
        plugin_service& operator=(const plugin_service& rhs) = delete;

        astra_pluginservice_proxy_t* proxy();
        void notify_host_event(astra_event_id id, const void* data, size_t dataSize);

^^^BEGINREPLACE:plugin^^^
        ^RETURN^ ^FUNC^(^PARAMS:ref^);
^^^ENDREPLACE^^^

    private:
        std::unique_ptr<plugin_service_impl> impl_;
        std::unique_ptr<astra_pluginservice_proxy_t> proxy_;
    };
}

#endif /* ASTRA_PLUGIN_SERVICE_H */
