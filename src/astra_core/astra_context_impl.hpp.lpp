/* ^^^AUTOGENHEADER^^^ */
#ifndef ASTRA_CONTEXT_IMPL_H
#define ASTRA_CONTEXT_IMPL_H

#include <astra_core/capi/astra_types.h>
#include <atomic>
#include <memory>
#include <unordered_map>
#include <string>

#include "astra_plugin_manager.hpp"
#include "astra_streamset.hpp"
#include "astra_stream_reader.hpp"
#include "astra_shared_library.hpp"
#include "astra_logger.hpp"
#include "astra_streamset_catalog.hpp"

struct astra_streamservice_proxy_t;

namespace astra {

    class context_impl
    {
    public:
        context_impl() = default;
        context_impl& operator=(const context_impl& rhs) = delete;
        context_impl(const context_impl& context) = delete;

        astra_status_t initialize();
        astra_status_t terminate();

^^^BEGINREPLACE:stream^^^
        ^RETURN^ ^FUNC^(^PARAMS:ref^);

^^^ENDREPLACE^^^
        astra_status_t notify_host_event(astra_event_id id, const void* data, size_t dataSize);

    private:
        bool initialized_{false};

        using plugin_manager_ptr = std::unique_ptr<plugin_manager>;
        plugin_manager_ptr pluginManager_;

        using ReaderList = std::vector<stream_reader*>;

        ReaderList activeReaders_;
        streamset_catalog setCatalog_;
    };
}

#endif /* ASTRA_CONTEXT_IMPL_H */
