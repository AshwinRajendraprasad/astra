.. |sdkname| replace:: Astra

************************
4 Retrieving Stream Data
************************

Stream Types
============

The |sdkname| SDK comes "stock" with a variety of stream types. Low-level stream types are generated by the sensor and passed along through the SDK to an application. Higher-level stream types are efficiently computed from low-level stream types by SDK plugins. In general, higher-level streams should be preferred to the low-level ones when they can be used.

Low Level
---------

+----------------+------------------------------------------------------------------------+
|Stream Type     |Description                                                             |
+================+========================================================================+
|ColorStream     | RGB pixel data from the sensor.  The ``data`` array included           |
|                | in each ``ColorFrame`` contains values ranging from 0-255              |
|                | for each color component of each pixel.                                |
+----------------+------------------------------------------------------------------------+
|DepthStream     | Depth data from the sensor. The ``data`` array included in each        |
|                | ``DepthFrame`` contains values in millimeters for each pixel           |
|                | within the sensor's field of view.                                     |
+----------------+------------------------------------------------------------------------+

Higher-Level
------------

+----------------+------------------------------------------------------------------------+
|Stream Type     |Description                                                             |
+================+========================================================================+
|PointStream     | World coordinates (XYZ) computed from the depth data.                  |
|                | The ``data`` array included in each ``PointFrame`` is an               |
|                | array of ``sensekit:Vector3f`` elements to more easily                 |
|                | access the ``x``, ``y`` and ``z`` values for each pixel.               |
+----------------+------------------------------------------------------------------------+
|HandStream      | Hand points computed from the depth data. On each ``HandFrame``,       |
|                | the number of points detected at any given time can be retrieved       |
|                | through the ``HandFrame::handpoint_count`` function, and a             |
|                | ``sensekit::HandPointList`` can be retrieved through the               |
|                | ``HandFrame::handpoints`` function.                                    |
+----------------+------------------------------------------------------------------------+ 

Getting the Data
================

Two methods are provided by the |sdkname| SDK to get stream data. Depending on your particular use case and the complexity of your application, one method may be better suited than the other.

Polling
-------

The polling method for getting frame data is the most direct method for getting stream data, and is also the method used in the Hello World tutorial. To use this method, you only need to call the ``get_latest_frame`` function on the ``StreamReader``, then use the templated ``get<T>`` function on the returned frame to retrieve specific frame types. "``T``" in this case must be a valid frame type. The ``get_latest_frame`` function is blocking, so application execution will suspend until a new frame is returned. A ``timeout`` can be passed as a parameter to the ``get_latest_frame`` function if you want to limit the amount of time that the SDK will wait for a new frame to arrive.

.. code-block:: c++
   :linenos:
   :lineno-start: 7
   :emphasize-lines: 10,11

   int main(int argc, char** argv)
   {
      sensekit::SenseKit::initialize();

      sensekit::Sensor sensor;
      sensekit::StreamReader reader = sensor.create_reader();

      reader.stream<sensekit::DepthStream>().start();

      sensekit::Frame frame = reader.get_latest_frame();
      auto depthFrame = frame.get<sensekit::DepthFrame>();

      sensekit::Sensekit::terminate();

      std::cout << "hit enter to exit program" << std::endl;
      std::cin.get();
      return 0;
   }
- Line 16 - Retrieves the latest frame
- Line 17 - Gets the depth frame from the latest frame

Listening
---------

The listening method for getting frame data requires a small amount of additional setup, but allows the developer to delegate the handling of a frame to one or more separate classes. The |sdkname| SDK provides an abstract class called ``FrameReadyListener`` which implements a single function called ``on_frame_ready``. ``on_frame_ready`` is called and passed a reference to a frame as soon as the frame is ready for processing. 

You must derive your own listener class from ``FrameReadyListener``, instantiate the derived listener object in your application and add it to the ``StreamReader`` using the ``StreamReader::addListener`` function. To see this method in action, check out the Simple Depth Viewer tutorial below.

Simple Depth Viewer
===================